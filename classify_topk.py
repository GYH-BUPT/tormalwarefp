# Script to classify topk Tor cells data: malware & benign (Python 3.7)
import sys
import os
import time
import argparse

# Dependent scripts
import loaders as ll
import autogluon_classify as ag
import ML_classify as mlc
import loaders_multilabel as multitest


def check_outfolder(d):
	if "OUTPUT_FOLDER" in d:
		outfolder = d["OUTPUT_FOLDER"]
	else:
		curpath = os.getcwd()
		if not os.path.exists(curpath+"/output"):
			os.system("mkdir "+curpath+"/output")
			outfolder = curpath+"/output/"
	return outfolder


def main(d, topk=3, train=True):
	print("Classifier Modes\n Mode 0: Binary Classification\n Mode 2: Multi Label Multi Class\n")
	# 1. read input
	[malfnames, benfnames, foldtotal, multiclass, maltotal, malinst, hostfts] = ll.get_list(d)
	print("Malicious files: %d, Benign files: %d "%(len(malfnames), len(benfnames)))
	print("Extract Host fts? ", hostfts)
	outfolder = check_outfolder(d)
	# Binary Classification: Training: Identify Malware and benign Tor connections
	if multiclass == 0:
		# 2. label: dt: {fpath: 0 or 1-> 0 for benign, 1 for malware}
		labeldt = ll.label_binary(malfnames, benfnames)
		# 3. feature extraction
		featdf = ll.extract_features(labeldt, multiclass, hostfts, top=topk)
		# 4. classify
		if train:
			if hostfts:
				ff = open(outfolder+str(malinst)+"_top"+str(topk)+"_host.score", "w+")
			else:
				ff = open(outfolder+str(malinst)+"_top"+str(topk)+".score", "w+")
			[ag_res1, ag_res2, fimp1, fimp2, cmatrix, perf, perfstack] = ag.main_1(featdf, "target", malinst, hostfts, topk)
			ll.output_avg(ag_res1, ag_res2, fimp1, fimp2, cmatrix, perf, perfstack, ff)
		else:
			# zeroday test
			if hostfts:
				models = ["5_True_imb", "5_True_top1_imb"] 
				ff = open(outfolder+"Top"+str(topk)+"_host_zerodaytest.score", "w+")
			else:
				models = ["5_False_imb", "5_False_top1_imb"]
				ff = open(outfolder+"Top"+str(topk)+"_zerodaytest.score", "w+")

			ff.write("Zeroday test results with models trained using Top3 and Top1 most active Tor connections (imbalanced set)\n")
			mpath = "agModels/"
			# Zero day binary classification test
			for model in models:
				ag.zerodaytest(featdf, malinst, hostfts, mpath+model, ff)
			ff.close()

		return

	# Multi-label Classification: Training
	elif multiclass == 2:
		if train:
			print("Training RF models with BR/CC/LP multi-labelling techniques:")
			mllabel_op = mlc.main_ml(d, malfnames, benfnames, foldtotal, maltotal, malinst, topk, hostfts)
			# result breakdown: [acc, hloss, mprec, mrecall, mf1, ctype, model]
			ll.output_multilabel(mllabel_op, outfolder, malinst, hostfts, topk)
		else:
			print("Zero day testing: Identify malware classes: ")
			# Multi-label Zeroday Test: Identify Malware classes of Malware related Tor connections
			labeldt = ll.label_multiclass(d, malfnames, benfnames, False)
			featdf = ll.extract_features(labeldt, multiclass, hostfts, top=topk, trainmulti=False)
			print("Tor malware connections for B1 & B2: ", featdf, featdf.size)
			time.sleep(5)
			multitest.test_models(featdf, outfolder)
		return

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description='Tor malware detector')
	parser.add_argument('--options', nargs=1, metavar="STR", help='Options file name')
	parser.add_argument('--topk', nargs=1, metavar="INT", help='k value in topk (k = 1 or 3)')
	parser.add_argument('--train', action='store_true', help='Train models (Set MULTICLASS: 0 - binary classification, 2 - malware class classification) in options files')
	parser.add_argument('--zeroday', action='store_true', help='Zero day test (0: identify malware connections, 2: identify malware classes')
	args = parser.parse_args()
	print(args, sys.argv)
	if not len(sys.argv) == 6:
		parser.print_help()
		print("Pls set all arguments (--options, --topk, --train/--zeroday)")
		sys.exit()
	
	print(args.options)
	if "options-" in args.options[0]:
		optfname = args.options[0]
	else:
		parser.print_help()
		print("Input options file (see sample 'options-' file)")
		sys.exit()
	
	if args.topk[0] == '1' or args.topk[0] == '3':
		top = int(args.topk[0])
	else:
		parser.print_help()
		print("Input k value for topk most active Tor connections to use (1 or 3)")
		sys.exit()
	
	#USAGE:> python classify_topk.py --options <options_file> --topk <topk> --train/zeroday
	# Scenarios:
	# :Binary Classification:
	#1> D5, imbalanced, top k = 3, with only CONNECTION-LEVEL features (Hayes 2016)
	#cmd> python classify_topk.py --options options-5imbalanced --topk 3 --train

	#2> D5, imbalanced, top k = 3, with CONNECTION+HOST-LEVEL features
	#cmd> python classify_topk.py --options options-5imbalanced_host --topk 3 --train 

	# :Zero day testing:
	#1> Identify Tor malware connections in zeroday data (zerodaytestdata/)
	#cmd> python classify_topk.py --options options-zeroday_binary --topk 3 --zeroday

	#2> Identify malware class of Tor malware connections in zeroday data (zerodaytestdata/)
	#cmd> python classify_topk.py --options options-zeroday_multilabel --topk 3 --zeroday
	d = ll.load_options(optfname)
	if args.train:
		# Training
		# 1. Train Autogluon models for binary classification & Multilabel models
		print(":Training Mode:")
		main(d, topk=top)
	elif args.zeroday:
		print(":Zeroday Testing Mode:")
		if "zeroday_binary" in optfname:
			print("Identify Tor malware connections (binary classifier test)")
			# 2.1 Binary classification - Zeroday test
			main(d, topk=top, train=False)
		elif "zeroday_multilabel" in optfname:
			print("Identify Tor malware class labels for malicious connections (multilabel classifier test)")
			# 2.2 Multilabel tag prediction (multiclass mode = 2)
			main(d, topk=top, train=False)
		else:
			print("Incorrect options file used (use options-zeroday_binary(multiclass=0) or options-zeroday_multilabel(multiclass=2))")
			sys.exit()

